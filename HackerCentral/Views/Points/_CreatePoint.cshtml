@model HackerCentral.ViewModels.PointsViewModel

@using(Html.BeginForm("Create", "Points", FormMethod.Post, new{@class=""}))
{
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
        <h3 id="myModalLabel">Add a Point</h3>
    </div>
    <div class="modal-body">
        <p>
            @Html.TextBoxFor(m => m.point.summary, new { placeholder = "Title (Summary)", name="summary" }) <br />
            @Html.TextAreaFor(m => m.point.full_text, new { placeholder = "Full Text" }) <br />
            @* @Html.TextBoxFor(m => m.emptyPoint.parent_id, new { placeholder = "Parent ID (0 for none)" }) <br /> *@ 
            @Html.DropDownListFor(m=>m.point.parent_id, Model.GetParentIDList()) <br />
            @Html.DropDownListFor(m => m.point.category, 
                new SelectListItem[] { 
                    new SelectListItem() { Text = "Supporting", Value = "1" }, 
                    new SelectListItem() { Text = "Opposing", Value = "2" } 
                } )
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
        <button class="btn btn-primary">Save changes</button>
    </div>
}


@*
    We need to use the PointsViewModel as the model for this partial view so we have access to GetParentIDList()
    This causes Html.TextBoxFor(...) to set the name field to point_value, when we just need value
    This javascript hack changes point_summary to just summary, etc., so that we can post directly to
    the PointsController Create(Point p) action.
*@
<script>
    $(document).ready(function () {
        $("#point_summary").attr("name", "summary");
        $("#point_full_text").attr("name", "full_text");
        $("#point_parent_id").attr("name", "parent_id");
        $("#point_category").attr("name", "category");
    });
</script>